<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= expert.name %>
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #065f46 0%, #047857 50%, #059669 100%);
            min-height: 100vh;
        }

        .gradient-bg {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .chat-container {
            height: calc(100vh - 128px);
            background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
        }

        .message-bubble {
            max-width: 80%;
            word-wrap: break-word;
            position: relative;
            animation: slideIn 0.3s ease-out;
        }

        /* Changed these classes to make user messages appear on right */
        .message-bubble.user {
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            color: white;
            border-radius: 20px 20px 5px 20px;
            margin-left: auto;
            /* This pushes to right */
            box-shadow: 0 4px 12px rgba(5, 150, 105, 0.4);
        }

        /* Changed these classes to make expert messages appear on left */
        .message-bubble.expert {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            color: #14532d;
            border-radius: 20px 20px 20px 5px;
            border: 1px solid #bbf7d0;
            box-shadow: 0 2px 8px rgba(5, 150, 105, 0.15);
            margin-right: auto;
            /* This pushes to left */
        }

        .message-bubble::before {
            content: '';
            position: absolute;
            width: 0;
            height: 0;
        }

        .message-bubble.user::before {
            right: -8px;
            bottom: 0;
            border-left: 10px solid #047857;
            border-top: 10px solid transparent;
        }

        .message-bubble.expert::before {
            left: -8px;
            bottom: 0;
            border-right: 10px solid #f0fdf4;
            border-top: 10px solid transparent;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .typing-indicator {
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        .send-button {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            transition: all 0.3s ease;
        }

        .send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
        }

        .input-field {
            transition: all 0.3s ease;
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border: 1px solid #bbf7d0;
        }

        .input-field:focus {
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.2);
            border-color: #10b981;
        }

        .expert-avatar {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        }

        .status-online {
            animation: pulse 2s infinite;
        }

        .glass-effect {
            backdrop-filter: blur(10px);
            background: rgba(240, 253, 244, 0.9);
            border: 1px solid rgba(187, 247, 208, 0.3);
            border-bottom: 1px solid rgba(187, 247, 208, 0.5);
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.6;
            margin-top: 4px;
        }

        .scroll-smooth {
            scroll-behavior: smooth;
        }

        .quick-actions {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border-top: 1px solid #bbf7d0;
        }

        .input-area {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border-top: 1px solid #bbf7d0;
        }

        .welcome-bubble {
            background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
            color: #065f46;
            border: 1px solid #bbf7d0;
        }

        .back-button {
            color: #065f46;
            transition: all 0.3s ease;
        }

        .back-button:hover {
            color: #047857;
            transform: translateX(-2px);
        }

        .header-text {
            color: #065f46;
        }

        .icon-buttons {
            color: #065f46;
            transition: all 0.3s ease;
        }

        .icon-buttons:hover {
            background: rgba(187, 247, 208, 0.5);
            color: #047857;
        }
    </style>
</head>

<body>
    <!-- Chat Header -->
    <header class="glass-effect sticky top-0 z-10">
        <div class="max-w-4xl mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <button onclick="history.back()" class="back-button">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                    </button>
                    <div class="flex items-center space-x-3">
                        <div
                            class="expert-avatar w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold relative">
                            <%= expert.name.charAt(0).toUpperCase() %>
                                <div
                                    class="status-online absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white">
                                </div>
                        </div>
                        <div>
                            <h1 class="text-xl font-semibold header-text">
                                <%= expert.name %>
                            </h1>
                            <p class="text-sm text-green-600 flex items-center">
                                <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                                Online now

                            </p>
                        </div>
                    </div>
                </div>
                <div class="flex items-center space-x-2">
                    <button class="icon-buttons p-2 rounded-full transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                    </button>
                    <button class="icon-buttons p-2 rounded-full transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Chat Container -->
    <div class="w-full">
        <div class="chat-container shadow-2xl">
            <!-- Messages Area -->
            <div class="h-full flex flex-col">
                <div class="flex-1 overflow-y-auto scroll-smooth p-6 space-y-4 max-w-4xl mx-auto w-full"
                    id="messagesContainer">
                    <!-- Welcome Message -->
                    <div class="text-center py-4">
                        <div class="welcome-bubble inline-block rounded-full px-4 py-2 text-sm">
                            Chat started with <%= expert.name %> â€¢ Today
                        </div>
                    </div>

                    <!-- Messages -->
                    <!-- In expert-chat.ejs - modify the messages section -->
                    <!-- Messages -->
                    <% messages.forEach((msg)=> {
                        const senderRole = msg.sender === "user" ? "user" : "expert";
                        %>
                        <div class="flex <%= senderRole === 'user' ? 'justify-end' : 'justify-start' %> mb-4">
                            <div class="message-bubble <%= senderRole %> px-4 py-3">
                                <p class="text-sm leading-relaxed">
                                    <%= msg.content %>
                                </p>
                                <div class="message-time text-right">
                                    <%= new Date().toLocaleTimeString('en-US', { hour: 'numeric' , minute: '2-digit' })
                                        %>
                                </div>
                            </div>
                        </div>
                        <% }) %>



                            <!-- Typing Indicator (Hidden by default) -->
                            <div class="typing-indicator hidden flex justify-start mb-4">
                                <div class="message-bubble expert px-4 py-3">
                                    <div class="flex items-center space-x-1">
                                        <div class="w-2 h-2 bg-green-500 rounded-full animate-bounce"></div>
                                        <div class="w-2 h-2 bg-green-500 rounded-full animate-bounce"
                                            style="animation-delay: 0.1s"></div>
                                        <div class="w-2 h-2 bg-green-500 rounded-full animate-bounce"
                                            style="animation-delay: 0.2s"></div>
                                    </div>
                                </div>
                            </div>
                </div>

                <!-- Input Area -->
                <div class="input-area p-4">
                    <div class="max-w-4xl mx-auto">
                        <form action="/experts/chat/send" method="POST" class="flex items-end space-x-3"
                            id="messageForm">
                            <input type="hidden" name="expertId" value="<%= expert._id %>">


                            <div class="flex-1">
                                <div class="relative">
                                    <textarea name="content" placeholder="Type your message..." required rows="1"
                                        class="input-field w-full rounded-2xl px-4 py-3 pr-12 resize-none focus:outline-none transition-all"
                                        id="messageInput" onkeypress="handleKeyPress(event)"
                                        oninput="autoResize(this)"></textarea>

                                    <!-- Emoji Button -->
                                    <button type="button"
                                        class="absolute right-3 top-3 p-1 hover:bg-green-200 rounded-full transition-colors">
                                        <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor"
                                            viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </button>
                                </div>
                            </div>

                            <button type="submit"
                                class="send-button p-3 rounded-full text-white shadow-lg hover:shadow-xl transition-all duration-300"
                                id="sendButton">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <% if (currentSender===expert._id.toString()) { %>
        <form action="/experts/chat/end" method="POST">
            <button type="submit"
                class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full text-sm shadow-md hover:shadow-lg">
                End Chat
            </button>
        </form>
        <% } %>

            <script src="/socket.io/socket.io.js"></script>
            <script>
                const socket = io();
                let mySocketId = null;

                socket.on('connect', () => {
                    mySocketId = socket.id;
                    socket.emit("joinRoom", "<%= expert._id %>");
                });

                const currentSender = "<%= currentSender %>";
                const roomId = "<%= expert._id.toString() %>";
                const currentUserType = currentSender === roomId ? "expert" : "user";




                socket.emit("joinRoom", roomId);

                const form = document.getElementById("messageForm");
                const input = document.getElementById("messageInput");
                const container = document.getElementById("messagesContainer");

                form.addEventListener("submit", function (e) {
                    e.preventDefault();
                    const message = input.value.trim();
                    if (!message) return;

                    socket.emit("chatMessage", {
                        roomId: "<%= expert._id %>",
                        message,
                        senderId: mySocketId
                    });

                    // appendMessage(true, message); // true => self
                    input.value = "";
                    autoResize(input);
                    hideTypingIndicator();
                });



                socket.on("chatMessage", ({ senderId, message }) => {
                    const isSelf = senderId === mySocketId;
                    appendMessage(isSelf, message);
                });



                socket.on("chatEnded", () => {
                    // Show message that expert has left
                    const messageDiv = document.createElement("div");
                    messageDiv.className = "text-center text-sm text-red-600 font-semibold my-4";
                    messageDiv.innerText = "Expert left the room.";

                    container.appendChild(messageDiv);
                    scrollToBottom();
                });






                function appendMessage(isSelf, message) {
                    const messageDiv = document.createElement("div");
                    messageDiv.className = "flex " + (isSelf ? "justify-end" : "justify-start") + " mb-4";

                    const bubble = document.createElement("div");
                    bubble.className = "message-bubble " + (isSelf ? "user" : "expert") + " px-4 py-3";
                    bubble.innerHTML = `
    <p class="text-sm leading-relaxed">${message}</p>
    <div class="message-time text-right">${new Date().toLocaleTimeString()}</div>
  `;

                    messageDiv.appendChild(bubble);
                    container.appendChild(messageDiv);
                    scrollToBottom();
                }

                function endChatRoom() {
                    if (confirm("Are you sure you want to end the chat?")) {
                        fetch('/experts/chat/end', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ roomId: "<%= roomId %>" })
                        }).then(() => {
                            alert("Chat has ended.");
                            window.location.href = '/experts';
                        });
                    }
                }





                function scrollToBottom() {
                    container.scrollTop = container.scrollHeight;
                }

                function autoResize(textarea) {
                    textarea.style.height = 'auto';
                    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
                }

                function handleKeyPress(event) {
                    if (event.key === 'Enter' && !event.shiftKey) {
                        event.preventDefault();
                        form.requestSubmit();
                    }
                }

                function showTypingIndicator() {
                    const typingEl = document.querySelector('.typing-indicator');
                    if (typingEl) {
                        typingEl.classList.remove('hidden');
                        scrollToBottom();
                    }
                }

                function hideTypingIndicator() {
                    const typingEl = document.querySelector('.typing-indicator');
                    if (typingEl) {
                        typingEl.classList.add('hidden');
                    }
                }

                document.addEventListener('DOMContentLoaded', function () {
                    input.focus();
                    scrollToBottom();

                    input.addEventListener('keydown', handleKeyPress);
                    input.addEventListener('input', () => {
                        showTypingIndicator();
                        clearTimeout(window.typingTimeout);
                        window.typingTimeout = setTimeout(hideTypingIndicator, 2000);
                    });
                });
            </script>

</body>

</html>