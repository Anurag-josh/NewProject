<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Prediction History | GardenGenius</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" as="style" onload="this.rel='stylesheet'"
        href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;700&display=swap" />
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade {
            animation: fadeIn 0.3s ease-out forwards;
        }
        .delay-100 { animation-delay: 0.1s; }
        .delay-200 { animation-delay: 0.2s; }
        .delay-300 { animation-delay: 0.3s; }
        
        .message-enter {
            opacity: 0;
            transform: translateY(10px);
        }
        .message-enter-active {
            opacity: 1;
            transform: translateY(0);
            transition: all 0.3s ease-out;
        }
        
        .typing-indicator {
            display: inline-block;
        }
        .typing-dot {
            display: inline-block;
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: #4CAF50;
            margin-right: 4px;
            animation: typingAnimation 1.4s infinite ease-in-out;
        }
        .typing-dot:nth-child(1) { animation-delay: 0s; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typingAnimation {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-3px); }
        }
        
        .history-item {
            transition: all 0.2s ease;
        }
        .history-item:hover {
            background-color: #f0fdf4;
        }
        .history-item.active {
            background-color: #dcfce7;
            border-left: 3px solid #16a34a;
        }
        
        .chatbox {
            scrollbar-width: thin;
            scrollbar-color: #d1fae5 #f0fdf4;
        }
        .chatbox::-webkit-scrollbar {
            width: 6px;
        }
        .chatbox::-webkit-scrollbar-track {
            background: #f0fdf4;
        }
        .chatbox::-webkit-scrollbar-thumb {
            background-color: #d1fae5;
            border-radius: 6px;
        }
    </style>
</head>

<body class="bg-gray-50 text-gray-900 font-sans min-h-screen" style="font-family: 'Manrope', sans-serif;">

    <!-- Navbar -->
    <nav class="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-white shadow-sm sticky top-0 z-10">
        <div class="flex items-center gap-4">
            <a href="/" class="flex items-center gap-2 text-green-700 hover:text-green-800">
                <svg viewBox="0 0 48 48" fill="currentColor" class="w-5 h-5">
                    <path d="M44 4H30.6666V17.3334H17.3334V30.6666H4V44H44V4Z"></path>
                </svg>
                <span class="text-lg font-bold">GardenGenius</span>
            </a>
        </div>
        <div class="flex items-center gap-4">
            <a href="/diagnosis" class="text-sm font-medium text-gray-600 hover:text-green-700">New Diagnosis</a>
            <a href="/history" class="text-sm font-medium text-green-700">History</a>
        </div>
    </nav>

    <!-- Page Content -->
    <div class="flex min-h-[calc(100vh-73px)]">

        <!-- Sidebar -->
        <div class="w-64 bg-white border-r border-gray-200 overflow-y-auto animate-fade">
            <div class="p-4 border-b border-gray-200">
                <h2 class="text-xl font-bold text-gray-800">Your Predictions</h2>
                <p class="text-xs text-gray-500 mt-1"><%= history.length %> items</p>
            </div>
            
            <% if (history.length===0) { %>
                <div class="p-6 text-center">
                    <div class="text-gray-400 mb-2">
                        <i class="fas fa-history text-3xl"></i>
                    </div>
                    <p class="text-gray-500 text-sm">No history available yet.</p>
                    <a href="/diagnosis" class="mt-3 inline-block text-sm text-green-600 hover:text-green-800 font-medium">
                        Start your first diagnosis
                    </a>
                </div>
            <% } else { %>
                <div class="divide-y divide-gray-100">
                    <% history.forEach((item, index)=> { %>
                        <button
                            class="history-item w-full text-left px-4 py-3 hover:bg-green-50 focus:outline-none transition-colors duration-150"
                            onclick="showPrediction(<%= index %>)"
                            id="history-btn-<%= index %>">
                            <div class="flex items-center gap-3">
                                <div class="w-10 h-10 bg-green-50 rounded-md overflow-hidden">
                                    <img src="/<%= item.imageUrl %>" alt="Thumbnail" class="w-full h-full object-cover">
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm font-medium text-gray-800 truncate">
                                        <% const preview=item.prediction.split('.')[0]; const trimmed=preview.length> 50 ?
                                            preview.substring(0, 50) + '...' : preview; %>
                                            <%= trimmed %>
                                    </p>
                                    <p class="text-xs text-gray-500 mt-1">
                                        <%= new Date(item.createdAt).toLocaleDateString() %>
                                    </p>
                                </div>
                            </div>
                        </button>
                    <% }) %>
                </div>
            <% } %>
        </div>

        <!-- Main Content -->
        <div class="flex-1 p-6 overflow-y-auto">
            <% if (history.length===0) { %>
                <div class="flex flex-col items-center justify-center h-full text-center animate-fade delay-100">
                    <div class="bg-green-100 p-6 rounded-full mb-4">
                        <i class="fas fa-seedling text-green-600 text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">No predictions yet</h3>
                    <p class="text-gray-600 max-w-md mb-6">
                        Your plant and soil analysis history will appear here once you start using GardenGenius.
                    </p>
                    <a href="/diagnosis" class="px-6 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors duration-200">
                        Start Diagnosing
                    </a>
                </div>
            <% } else { %>
                <% history.forEach((item, index)=> { %>
                    <div id="prediction-<%= index %>" class="hidden animate-fade delay-100">
                        <div class="bg-white rounded-xl shadow-sm p-6 mb-6">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-bold text-gray-800">Prediction Details</h3>
                                <span class="text-xs text-gray-500">
                                    <%= new Date(item.createdAt).toLocaleString() %>
                                </span>
                            </div>
                            
                            <div class="flex flex-col md:flex-row gap-6">
                                <div class="md:w-1/2">
                                    <div class="rounded-lg overflow-hidden border border-gray-200 shadow-inner">
                                        <img src="/<%= item.imageUrl %>" alt="Prediction Image" 
                                            class="w-full h-auto object-contain max-h-80 mx-auto" />
                                    </div>
                                </div>
                                
                                <div class="md:w-1/2">
                                    <div class="bg-green-50 rounded-lg p-4 h-full">
                                        <h4 class="font-semibold text-green-700 mb-2 flex items-center gap-2">
                                            <i class="fas fa-leaf"></i>
                                            <span>Analysis Result</span>
                                        </h4>
                                        <div class="prose prose-sm max-w-none text-gray-700 whitespace-pre-line">
                                            <%= item.prediction %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Chat Section -->
                        <div class="bg-white rounded-xl shadow-sm p-6">
                            <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                                <i class="fas fa-comments text-green-600"></i>
                                <span>Ask About This Diagnosis</span>
                            </h3>
                            
                            <div class="space-y-4">
                                <!-- Suggested Questions -->
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4">
                                    <button onclick="setQuestion(<%= index %>, 'What treatment do you recommend?')"
                                        class="text-xs text-left p-2 bg-green-50 hover:bg-green-100 rounded-lg border border-green-100 transition-colors">
                                        What treatment do you recommend?
                                    </button>
                                    <button onclick="setQuestion(<%= index %>, 'Is this disease contagious to other plants?')"
                                        class="text-xs text-left p-2 bg-green-50 hover:bg-green-100 rounded-lg border border-green-100 transition-colors">
                                        Is this disease contagious?
                                    </button>
                                    <button onclick="setQuestion(<%= index %>, 'What preventive measures should I take?')"
                                        class="text-xs text-left p-2 bg-green-50 hover:bg-green-100 rounded-lg border border-green-100 transition-colors">
                                        Preventive measures
                                    </button>
                                </div>
                                
                                <!-- Chat Input -->
                                <div class="relative">
                                    <textarea id="input-<%= index %>" placeholder="Ask a question about this diagnosis..." rows="2"
                                        oninput="autoExpand(this)"
                                        class="w-full resize-none p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 focus:border-transparent"></textarea>
                                    <button onclick="sendMessage(<%= index %>, `<%= item.prediction.replace(/`/g, '\\`') %>`)"
                                        class="absolute right-2 bottom-2 bg-green-600 text-white p-1 rounded-md hover:bg-green-700 transition-colors">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </div>
                                
                                <!-- Chatbox -->
                                <div id="chatbox-wrapper-<%= index %>" class="hidden">
                                    <div id="chatbox-<%= index %>"
                                        class="chatbox flex flex-col gap-3 p-3 max-h-64 overflow-y-auto bg-gray-50 rounded-lg border border-gray-200">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            <% } %>
        </div>
    </div>

    <script>
    // Show the first prediction by default
    document.addEventListener('DOMContentLoaded', () => {
        if (<%= history.length %> > 0) {
            showPrediction(0);
        }
    });

    function showPrediction(index) {
        // Hide all prediction sections
        document.querySelectorAll('[id^="prediction-"]').forEach(el => {
            el.classList.add('hidden');
        });

        // Show selected prediction
        const predictionEl = document.getElementById(`prediction-${index}`);
        if (predictionEl) {
            predictionEl.classList.remove('hidden');
        }

        // Update active state in sidebar
        document.querySelectorAll('.history-item').forEach(el => {
            el.classList.remove('active');
        });
        document.getElementById(`history-btn-${index}`).classList.add('active');

        // Scroll to top of content
        document.querySelector('.flex-1').scrollTo(0, 0);
    }

    function autoExpand(textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = textarea.scrollHeight + 'px';

        // Show chatbox if not already visible
        const index = textarea.id.split('-')[1];
        const wrapper = document.getElementById(`chatbox-wrapper-${index}`);
        if (textarea.value.trim() && wrapper.classList.contains('hidden')) {
            wrapper.classList.remove('hidden');
        }
    }

    function setQuestion(index, question) {
        const input = document.getElementById(`input-${index}`);
        input.value = question;
        autoExpand(input);
        input.focus();

        const wrapper = document.getElementById(`chatbox-wrapper-${index}`);
        wrapper.classList.remove('hidden');
    }

    async function sendMessage(index, predictionText) {
        const input = document.getElementById(`input-${index}`);
        const chatbox = document.getElementById(`chatbox-${index}`);
        const message = input.value.trim();
        if (!message) return;

        const userMsg = document.createElement('div');
        userMsg.className = "bg-green-100 text-sm rounded p-2 self-end";
        userMsg.innerText = message;
        chatbox.appendChild(userMsg);
        input.value = '';

        try {
            const response = await fetch('http://localhost:5001/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    prompt: `User is asking about: ${predictionText}. Question: ${message}`
                })
            });

            const data = await response.json();
            const reply = data.reply || "No reply found.";

            const botMsg = document.createElement('div');
            botMsg.className = "bg-gray-100 text-sm rounded p-2 self-start";
            botMsg.innerText = reply;
            chatbox.appendChild(botMsg);
        } catch (err) {
            const errorMsg = document.createElement('div');
            errorMsg.className = "bg-red-100 text-sm rounded p-2 text-red-800 self-start";
            errorMsg.innerText = "Error: Unable to fetch reply.";
            chatbox.appendChild(errorMsg);
        }
    }

    function addChatMessage(index, text, type) {
        const chatbox = document.getElementById(`chatbox-${index}`);
        const wrapper = document.getElementById(`chatbox-wrapper-${index}`);

        if (wrapper.classList.contains('hidden')) {
            wrapper.classList.remove('hidden');
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `flex ${type === 'user' ? 'justify-end' : 'justify-start'} message-enter`;

        const bubble = document.createElement('div');
        bubble.className = `max-w-[80%] px-3 py-2 rounded-lg text-sm ${type === 'user'
            ? 'bg-green-100 text-gray-800 rounded-br-none'
            : type === 'error'
                ? 'bg-red-100 text-red-800 rounded-bl-none'
                : 'bg-white text-gray-800 rounded-bl-none border shadow-xs'}`;
        bubble.textContent = text;

        messageDiv.appendChild(bubble);
        chatbox.appendChild(messageDiv);

        // Animate message entry
        setTimeout(() => {
            messageDiv.classList.add('message-enter-active');
        }, 10);

        // Scroll to bottom
        chatbox.scrollTop = chatbox.scrollHeight;
    }

    function showTypingIndicator(index) {
        const chatbox = document.getElementById(`chatbox-${index}`);
        const typingId = 'typing-' + Date.now();

        const typingDiv = document.createElement('div');
        typingDiv.className = 'flex justify-start message-enter';
        typingDiv.id = typingId;

        const bubble = document.createElement('div');
        bubble.className = 'bg-white px-3 py-2 rounded-lg rounded-bl-none border shadow-xs';

        const dots = document.createElement('div');
        dots.className = 'typing-indicator';
        dots.innerHTML = `
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
            <span class="typing-dot"></span>
        `;

        bubble.appendChild(dots);
        typingDiv.appendChild(bubble);
        chatbox.appendChild(typingDiv);

        setTimeout(() => {
            typingDiv.classList.add('message-enter-active');
        }, 10);

        chatbox.scrollTop = chatbox.scrollHeight;

        return typingId;
    }

    function hideTypingIndicator(index, typingId) {
        if (typingId) {
            const element = document.getElementById(typingId);
            if (element) element.remove();
        }
    }
</script>

</body>
</html>